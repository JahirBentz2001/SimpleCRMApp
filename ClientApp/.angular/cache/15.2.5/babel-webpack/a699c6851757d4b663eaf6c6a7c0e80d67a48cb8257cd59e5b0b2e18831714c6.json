{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class CustomerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `listCustomer()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listCustomer$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.ListCustomerPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listCustomer$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer$Plain(params, context) {\n    return this.listCustomer$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listCustomer()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.ListCustomerPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listCustomer$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer(params, context) {\n    return this.listCustomer$Response(params, context).pipe(map(r => r.body));\n  }\n}\nCustomerService.ListCustomerPath = '/Customer';\nCustomerService.ɵfac = function CustomerService_Factory(t) {\n  return new (t || CustomerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nCustomerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomerService,\n  factory: CustomerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAkCA,YAAY,QAAQ,sBAAsB;AAG5E,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAE5C,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;;;;AAKnD,OAAM,MAAOC,eAAgB,SAAQF,WAAW;EAC9CG,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,2BAA2B,CACzBC,MACC,EACDC,OAAqB;IAErB,MAAMC,EAAE,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACS,OAAO,EAAER,eAAe,CAACS,gBAAgB,EAAE,KAAK,CAAC;IACpF,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CACtBH,EAAE,CAACI,KAAK,CAAC;MAAEC,YAAY,EAAE,MAAM;MAAEC,MAAM,EAAE,YAAY;MAAEP;IAAO,CAAE,CAAC,CAClE,CAACQ,IAAI,CACJlB,MAAM,CAAEmB,CAAM,IAA6BA,CAAC,YAAYpB,YAAY,CAAC,EACrEE,GAAG,CAAEkB,CAAoB,IAAI;MAC3B,OAAOA,CAA0C;IACnD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,kBAAkB,CAChBX,MACC,EACDC,OAAqB;IAErB,OAAO,IAAI,CAACF,2BAA2B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACQ,IAAI,CAC3DjB,GAAG,CAAEkB,CAAwC,IAAwBA,CAAC,CAACE,IAAI,CAAC,CAC7E;EACH;EAEA;;;;;;EAMAC,qBAAqB,CACnBb,MACC,EACDC,OAAqB;IAErB,MAAMC,EAAE,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACS,OAAO,EAAER,eAAe,CAACS,gBAAgB,EAAE,KAAK,CAAC;IACpF,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CACtBH,EAAE,CAACI,KAAK,CAAC;MAAEC,YAAY,EAAE,MAAM;MAAEC,MAAM,EAAE,WAAW;MAAEP;IAAO,CAAE,CAAC,CACjE,CAACQ,IAAI,CACJlB,MAAM,CAAEmB,CAAM,IAA6BA,CAAC,YAAYpB,YAAY,CAAC,EACrEE,GAAG,CAAEkB,CAAoB,IAAI;MAC3B,OAAOA,CAA0C;IACnD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAI,YAAY,CACVd,MACC,EACDC,OAAqB;IAErB,OAAO,IAAI,CAACY,qBAAqB,CAACb,MAAM,EAAEC,OAAO,CAAC,CAACQ,IAAI,CACrDjB,GAAG,CAAEkB,CAAwC,IAAwBA,CAAC,CAACE,IAAI,CAAC,CAC7E;EACH;;AAxFWjB,eAAgB,CAMXS,gBAAgB,GAAG,WAAW;AANnCT,eAAgB;mBAAhBA,eAAe;AAAA;AAAfA,eAAgB;SAAhBA,eAAe;EAAAoB,SAAfpB,eAAe;EAAAqB,YADF;AAAM","names":["HttpResponse","filter","map","BaseService","RequestBuilder","CustomerService","constructor","config","http","listCustomer$Plain$Response","params","context","rb","rootUrl","ListCustomerPath","request","build","responseType","accept","pipe","r","listCustomer$Plain","body","listCustomer$Response","listCustomer","factory","providedIn"],"sourceRoot":"","sources":["/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/api/services/customer.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\nimport { CustomerRm } from '../models/customer-rm';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `listCustomer()` */\n  static readonly ListCustomerPath = '/Customer';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listCustomer$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer$Plain$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<CustomerRm>>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.ListCustomerPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<CustomerRm>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listCustomer$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer$Plain(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<CustomerRm>> {\n    return this.listCustomer$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<CustomerRm>>): Array<CustomerRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listCustomer()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<CustomerRm>>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.ListCustomerPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'text/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<CustomerRm>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listCustomer$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listCustomer(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<CustomerRm>> {\n    return this.listCustomer$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<CustomerRm>>): Array<CustomerRm> => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}