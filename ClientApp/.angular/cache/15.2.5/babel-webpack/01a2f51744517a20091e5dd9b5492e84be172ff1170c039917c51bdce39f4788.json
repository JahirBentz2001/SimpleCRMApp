{"ast":null,"code":"import Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = function () {\n  return [\"/\"];\n};\nexport class UpdateCustomerComponent {\n  constructor(customerService, activatedRoute, formBuilder, router) {\n    this.customerService = customerService;\n    this.activatedRoute = activatedRoute;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.customerRm = {};\n    this.formGroup = this.formBuilder.group({\n      id: [''],\n      firstName: [''],\n      lastName: [''],\n      email: ['']\n    });\n    this.customerNotFound = error => {\n      Swal.fire({\n        icon: 'error',\n        title: 'Customer not found',\n        text: 'The customer you are looking for does not exist',\n        confirmButtonText: 'Ok'\n      }).then(() => this.router.navigate(['/']));\n    };\n  }\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(params => {\n      const customerId = params['id'];\n      this.getCustomerById(customerId);\n    });\n  }\n  getCustomerById(customerId) {\n    this.customerService.getCustomer({\n      id: customerId\n    }).subscribe({\n      next: customer => this.customerRm = customer,\n      error: this.customerNotFound\n    });\n  }\n}\nUpdateCustomerComponent.ɵfac = function UpdateCustomerComponent_Factory(t) {\n  return new (t || UpdateCustomerComponent)(i0.ɵɵdirectiveInject(i1.CustomerService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i2.Router));\n};\nUpdateCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateCustomerComponent,\n  selectors: [[\"app-update-customer\"]],\n  decls: 29,\n  vars: 6,\n  consts: [[1, \"hero\"], [1, \"hero-body\"], [1, \"container\"], [1, \"title\"], [\"type\", \"hidden\", \"formControlName\", \"id\", 3, \"value\"], [1, \"field\", 2, \"width\", \"20rem\"], [1, \"label\"], [1, \"control\"], [\"formControlName\", \"firstName\", \"type\", \"text\", \"placeholder\", \"First Name\", 1, \"input\", 3, \"value\"], [\"formControlName\", \"lastName\", \"type\", \"text\", \"placeholder\", \"Last Name\", 1, \"input\", 3, \"value\"], [\"formControlName\", \"email\", \"type\", \"text\", \"placeholder\", \"example@mail.com\", 1, \"input\", 3, \"value\"], [1, \"field\"], [\"type\", \"submit\", 1, \"button\", \"is-info\"], [1, \"control\", \"mt-2\"], [3, \"routerLink\"]],\n  template: function UpdateCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \" Update customer \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\");\n      i0.ɵɵelement(6, \"input\", 4);\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n      i0.ɵɵtext(9, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 7);\n      i0.ɵɵelement(11, \"input\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 5)(13, \"label\", 6);\n      i0.ɵɵtext(14, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 7);\n      i0.ɵɵelement(16, \"input\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\", 5)(18, \"label\", 6);\n      i0.ɵɵtext(19, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 7);\n      i0.ɵɵelement(21, \"input\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(22, \"div\", 11)(23, \"div\", 7)(24, \"button\", 12);\n      i0.ɵɵtext(25, \"Save changes\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"div\", 13)(27, \"a\", 14);\n      i0.ɵɵtext(28, \"Back\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.customerRm.id);\n      i0.ɵɵadvance(5);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.customerRm.firstName);\n      i0.ɵɵadvance(5);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.customerRm.lastName);\n      i0.ɵɵadvance(5);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.customerRm.email);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(5, _c0));\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgForm, i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAOA,OAAOA,IAAI,MAAM,aAAa;;;;;;;;AAO9B,OAAM,MAAOC,uBAAuB;EAElCC,YACUC,eAAgC,EAChCC,cAA8B,EAC9BC,WAAwB,EACxBC,MAAc;IAHd,oBAAe,GAAfH,eAAe;IACf,mBAAc,GAAdC,cAAc;IACd,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IAGhB,eAAU,GAAe,EAAE;IAE3B,cAAS,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACjCC,EAAE,EAAE,CAAC,EAAE,CAAC;MACRC,SAAS,EAAE,CAAC,EAAE,CAAC;MACfC,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,KAAK,EAAE,CAAC,EAAE;KACX,CAAC;IAkBM,qBAAgB,GAAIC,KAAU,IAAI;MACxCZ,IAAI,CAACa,IAAI,CAAC;QACRC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,oBAAoB;QAC3BC,IAAI,EAAE,iDAAiD;QACvDC,iBAAiB,EAAE;OACpB,CAAC,CACDC,IAAI,CAAC,MAAM,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1C,CAAC;EAnCC;EAYFC,QAAQ;IACN,IAAI,CAAChB,cAAc,CAACiB,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MAC5C,MAAME,UAAU,GAAGF,MAAM,CAAC,IAAI,CAAC;MAC/B,IAAI,CAACG,eAAe,CAACD,UAAU,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAC,eAAe,CAACD,UAAkB;IAChC,IAAI,CAACpB,eAAe,CAACsB,WAAW,CAAC;MAAEjB,EAAE,EAAEe;IAAU,CAAE,CAAC,CACjDD,SAAS,CAAC;MACTI,IAAI,EAAGC,QAAQ,IAAK,IAAI,CAACC,UAAU,GAAGD,QAAQ;MAC9Cf,KAAK,EAAE,IAAI,CAACiB;KACb,CAAC;EACN;;AAhCW5B,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCbpCC,kCAAsB;MAIdA,iCACF;MAAAA,iBAAK;MACLA,4BAAM;MACJA,2BAAwE;MACxEA,8BAAyC;MAChBA,0BAAU;MAAAA,iBAAQ;MACvCA,+BAAqB;MACjBA,4BAA2H;MAC/HA,iBAAM;MAEVA,+BAAyC;MAChBA,0BAAS;MAAAA,iBAAQ;MACtCA,+BAAqB;MACjBA,4BAAwH;MAC5HA,iBAAM;MAEVA,+BAAyC;MAChBA,sBAAK;MAAAA,iBAAQ;MAClCA,+BAAqB;MACjBA,6BAAyH;MAC7HA,iBAAM;MAEVA,gCAAmB;MAEkCA,6BAAY;MAAAA,iBAAS;MAEtEA,gCAA0B;MACEA,qBAAI;MAAAA,iBAAI;;;MAxBEA,eAA2B;MAA3BA,oDAA2B;MAIyBA,eAAkC;MAAlCA,2DAAkC;MAMpCA,eAAiC;MAAjCA,0DAAiC;MAM7BA,eAA8B;MAA9BA,uDAA8B;MAQnHA,eAAoB;MAApBA,uDAAoB","names":["Swal","UpdateCustomerComponent","constructor","customerService","activatedRoute","formBuilder","router","group","id","firstName","lastName","email","error","fire","icon","title","text","confirmButtonText","then","navigate","ngOnInit","params","subscribe","customerId","getCustomerById","getCustomer","next","customer","customerRm","customerNotFound","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/update-customer/update-customer.component.ts","/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/update-customer/update-customer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Validator } from '@angular/forms';\nimport { CustomerService } from '../api/services';\nimport { CustomerRm } from '../api/models';\nimport { CustomerDto } from '../api/models';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-update-customer',\n  templateUrl: './update-customer.component.html',\n  styleUrls: ['./update-customer.component.css']\n})\nexport class UpdateCustomerComponent implements OnInit {\n\n  constructor(\n    private customerService: CustomerService,\n    private activatedRoute: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private router: Router\n  ){}\n\n  customerRm: CustomerRm = {};\n\n  formGroup = this.formBuilder.group({\n    id: [''],\n    firstName: [''],\n    lastName: [''],\n    email: [''],\n  });\n\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n      const customerId = params['id'];\n      this.getCustomerById(customerId);\n    });\n  }\n\n  getCustomerById(customerId: string) {\n    this.customerService.getCustomer({ id: customerId })\n      .subscribe({\n        next: (customer) => this.customerRm = customer,\n        error: this.customerNotFound\n      });\n  }\n\n  private customerNotFound = (error: any) => {\n    Swal.fire({\n      icon: 'error',\n      title: 'Customer not found',\n      text: 'The customer you are looking for does not exist',\n      confirmButtonText: 'Ok'\n    })\n    .then(() => this.router.navigate(['/']));\n  }\n\n}\n","\n<section class=\"hero\">\n  <div class=\"hero-body\">\n    <div class=\"container\">\n      <h1 class=\"title\">\n        Update customer\n      </h1>\n      <form>\n        <input type=\"hidden\" formControlName=\"id\" value=\"{{ customerRm.id }}\" />\n        <div class=\"field\" style=\"width: 20rem;\">\n            <label class=\"label\">First Name</label>\n            <div class=\"control\">\n                <input formControlName=\"firstName\" class=\"input\" type=\"text\" placeholder=\"First Name\" value=\"{{ customerRm.firstName }}\" />\n            </div>  \n        </div>\n        <div class=\"field\" style=\"width: 20rem;\">\n            <label class=\"label\">Last Name</label>\n            <div class=\"control\">\n                <input formControlName=\"lastName\" class=\"input\" type=\"text\" placeholder=\"Last Name\" value=\"{{ customerRm.lastName }}\" />\n            </div>  \n        </div>\n        <div class=\"field\" style=\"width: 20rem;\">\n            <label class=\"label\">Email</label>\n            <div class=\"control\">\n                <input formControlName=\"email\" class=\"input\" type=\"text\" placeholder=\"example@mail.com\" value=\"{{ customerRm.email }}\" />\n            </div>  \n        </div>\n        <div class=\"field\">\n            <div class=\"control\">\n                <button type=\"submit\" class=\"button is-info\">Save changes</button>\n            </div>\n            <div class=\"control mt-2\">\n                <a [routerLink]=\"['/']\">Back</a>\n            </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}