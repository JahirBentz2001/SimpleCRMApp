{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class AddCustomerComponent {\n  constructor(customerService, router) {\n    this.customerService = customerService;\n    this.router = router;\n    this.formGroup = new FormGroup({\n      firstName: new FormControl('', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(50)])),\n      lastName: new FormControl('', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(75)])),\n      email: new FormControl('', Validators.compose([Validators.required, Validators.email, Validators.minLength(5), Validators.maxLength(100)]))\n    });\n  }\n  // Form validations\n  get invalidFirstName() {\n    return this.formGroup.controls.firstName.invalid && (this.formGroup.controls.firstName.dirty || this.formGroup.controls.firstName.touched);\n  }\n  get invalidLastName() {\n    return this.formGroup.controls.lastName.invalid && (this.formGroup.controls.lastName.dirty || this.formGroup.controls.lastName.touched);\n  }\n  get invalidEmail() {\n    return this.formGroup.controls.email.invalid && (this.formGroup.controls.email.dirty || this.formGroup.controls.email.touched);\n  }\n}\nAddCustomerComponent.ɵfac = function AddCustomerComponent_Factory(t) {\n  return new (t || AddCustomerComponent)(i0.ɵɵdirectiveInject(i1.CustomerService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAddCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddCustomerComponent,\n  selectors: [[\"app-add-customer\"]],\n  decls: 6,\n  vars: 0,\n  consts: [[1, \"hero\"], [1, \"hero-body\"], [1, \"container\"], [1, \"title\"]],\n  template: function AddCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \" Add customer \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"form\");\n      i0.ɵɵelementEnd()()();\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;;;;AAUnE,OAAM,MAAOC,oBAAoB;EAE/BC,YACUC,eAAgC,EAChCC,MAAc;IADd,oBAAe,GAAfD,eAAe;IACf,WAAM,GAANC,MAAM;IAEhB,cAAS,GAAG,IAAIN,SAAS,CAAC;MACxBO,SAAS,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,OAAO,CAAC,CAChDN,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EACvBR,UAAU,CAACS,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC,CAAC;MACHC,QAAQ,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,OAAO,CAAC,CAC/CN,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EACvBR,UAAU,CAACS,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC,CAAC;MACHE,KAAK,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,OAAO,CAAC,CAC5CN,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACW,KAAK,EAChBX,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EACvBR,UAAU,CAACS,SAAS,CAAC,GAAG,CAAC,CAC1B,CAAC;KACH,CAAC;EAnBwB;EAqB1B;EACA,IAAIG,gBAAgB;IAClB,OAAO,IAAI,CAACC,SAAS,CAACC,QAAQ,CAACT,SAAS,CAACU,OAAO,KAC1C,IAAI,CAACF,SAAS,CAACC,QAAQ,CAACT,SAAS,CAACW,KAAK,IAAI,IAAI,CAACH,SAAS,CAACC,QAAQ,CAACT,SAAS,CAACY,OAAO,CAAC;EAC7F;EAEA,IAAIC,eAAe;IACjB,OAAO,IAAI,CAACL,SAAS,CAACC,QAAQ,CAACJ,QAAQ,CAACK,OAAO,KACzC,IAAI,CAACF,SAAS,CAACC,QAAQ,CAACJ,QAAQ,CAACM,KAAK,IAAI,IAAI,CAACH,SAAS,CAACC,QAAQ,CAACJ,QAAQ,CAACO,OAAO,CAAC;EAC3F;EAEA,IAAIE,YAAY;IACd,OAAO,IAAI,CAACN,SAAS,CAACC,QAAQ,CAACH,KAAK,CAACI,OAAO,KACtC,IAAI,CAACF,SAAS,CAACC,QAAQ,CAACH,KAAK,CAACK,KAAK,IAAI,IAAI,CAACH,SAAS,CAACC,QAAQ,CAACH,KAAK,CAACM,OAAO,CAAC;EACrF;;AAvCWhB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCXjCC,kCAAsB;MAIZA,8BACF;MAAAA,iBAAK;MACLA,uBAEO;MACTA,iBAAM","names":["FormGroup","FormControl","Validators","AddCustomerComponent","constructor","customerService","router","firstName","compose","required","minLength","maxLength","lastName","email","invalidFirstName","formGroup","controls","invalid","dirty","touched","invalidLastName","invalidEmail","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/add-customer/add-customer.component.ts","/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/add-customer/add-customer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CustomerDto } from '../api/models';\nimport { CustomerService } from '../api/services';\n\n@Component({\n  selector: 'app-add-customer',\n  templateUrl: './add-customer.component.html',\n  styleUrls: ['./add-customer.component.css']\n})\nexport class AddCustomerComponent {\n\n  constructor(\n    private customerService: CustomerService,\n    private router: Router){}\n\n  formGroup = new FormGroup({\n    firstName: new FormControl('', Validators.compose([\n      Validators.required,\n      Validators.minLength(3),\n      Validators.maxLength(50)\n    ])),\n    lastName: new FormControl('', Validators.compose([\n      Validators.required,\n      Validators.minLength(3),\n      Validators.maxLength(75)\n    ])),\n    email: new FormControl('', Validators.compose([\n      Validators.required,\n      Validators.email,\n      Validators.minLength(5),\n      Validators.maxLength(100)\n    ]))\n  });\n\n  // Form validations\n  get invalidFirstName(){\n    return this.formGroup.controls.firstName.invalid \n      && (this.formGroup.controls.firstName.dirty || this.formGroup.controls.firstName.touched);\n  }\n\n  get invalidLastName(){\n    return this.formGroup.controls.lastName.invalid \n      && (this.formGroup.controls.lastName.dirty || this.formGroup.controls.lastName.touched);\n  }\n\n  get invalidEmail(){\n    return this.formGroup.controls.email.invalid \n      && (this.formGroup.controls.email.dirty || this.formGroup.controls.email.touched);\n  }\n\n  \n\n}\n","<section class=\"hero\">\n    <div class=\"hero-body\">\n      <div class=\"container\">\n        <h1 class=\"title\">\n          Add customer\n        </h1>\n        <form>\n          \n        </form>\n      </div>\n    </div>\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}