{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet UpdateCustomerComponent = class UpdateCustomerComponent {\n  constructor(customerService, activatedRoute, router) {\n    this.customerService = customerService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.customerRm = {};\n    this.formGroup = new FormGroup({\n      id: new FormControl('', Validators.required),\n      firstName: new FormControl('', Validators.compose([Validators.minLength(2), Validators.maxLength(50)])),\n      lastName: new FormControl('', Validators.compose([Validators.minLength(2), Validators.maxLength(75)])),\n      email: new FormControl('', Validators.compose([Validators.email, Validators.minLength(5), Validators.maxLength(100)]))\n    });\n    this.customerNotFound = error => {\n      Swal.fire({\n        icon: 'error',\n        title: 'Customer not found',\n        text: 'The customer you are looking for does not exist',\n        confirmButtonText: 'Ok'\n      }).then(() => this.router.navigate(['/']));\n    };\n  }\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(params => {\n      const customerId = params['id'];\n      this.getCustomerById(customerId);\n    });\n  }\n  getCustomerById(customerId) {\n    this.customerService.getCustomer({\n      id: customerId\n    }).subscribe({\n      next: customer => this.customerRm = customer,\n      error: this.customerNotFound\n    });\n  }\n};\nUpdateCustomerComponent = __decorate([Component({\n  selector: 'app-update-customer',\n  templateUrl: './update-customer.component.html',\n  styleUrls: ['./update-customer.component.css']\n})], UpdateCustomerComponent);\nexport { UpdateCustomerComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAKnE,OAAOC,IAAI,MAAM,aAAa;AAOvB,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAElCC,YACUC,eAAgC,EAChCC,cAA8B,EAC9BC,MAAc;IAFd,oBAAe,GAAfF,eAAe;IACf,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IAGhB,eAAU,GAAe,EAAE;IAE3B,cAAS,GAAG,IAAIP,SAAS,CAAC;MACxBQ,EAAE,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACQ,QAAQ,CAAC;MAC5CC,SAAS,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,OAAO,CAAC,CAChDV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC,CAAC;MACHC,QAAQ,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,OAAO,CAAC,CAC/CV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC,CAAC;MACHE,KAAK,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,OAAO,CAAC,CAC5CV,UAAU,CAACc,KAAK,EAChBd,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,GAAG,CAAC,CAC1B,CAAC;KACH,CAAC;IAiBM,qBAAgB,GAAIG,KAAU,IAAI;MACxCd,IAAI,CAACe,IAAI,CAAC;QACRC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,oBAAoB;QAC3BC,IAAI,EAAE,iDAAiD;QACvDC,iBAAiB,EAAE;OACpB,CAAC,CACDC,IAAI,CAAC,MAAM,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1C,CAAC;EA5CC;EAqBFC,QAAQ;IACN,IAAI,CAAClB,cAAc,CAACmB,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MAC5C,MAAME,UAAU,GAAGF,MAAM,CAAC,IAAI,CAAC;MAC/B,IAAI,CAACG,eAAe,CAACD,UAAU,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAC,eAAe,CAACD,UAAkB;IAChC,IAAI,CAACtB,eAAe,CAACwB,WAAW,CAAC;MAAErB,EAAE,EAAEmB;IAAU,CAAE,CAAC,CACjDD,SAAS,CAAC;MACTI,IAAI,EAAGC,QAAQ,IAAK,IAAI,CAACC,UAAU,GAAGD,QAAQ;MAC9Cf,KAAK,EAAE,IAAI,CAACiB;KACb,CAAC;EACN;CAYD;AApDY9B,uBAAuB,eALnCL,SAAS,CAAC;EACToC,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACWjC,uBAAuB,CAoDnC;SApDYA,uBAAuB","names":["Component","FormControl","FormGroup","Validators","Swal","UpdateCustomerComponent","constructor","customerService","activatedRoute","router","id","required","firstName","compose","minLength","maxLength","lastName","email","error","fire","icon","title","text","confirmButtonText","then","navigate","ngOnInit","params","subscribe","customerId","getCustomerById","getCustomer","next","customer","customerRm","customerNotFound","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/update-customer/update-customer.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Validator } from '@angular/forms';\nimport { CustomerService } from '../api/services';\nimport { CustomerRm } from '../api/models';\nimport { CustomerDto } from '../api/models';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-update-customer',\n  templateUrl: './update-customer.component.html',\n  styleUrls: ['./update-customer.component.css']\n})\nexport class UpdateCustomerComponent implements OnInit {\n\n  constructor(\n    private customerService: CustomerService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ){}\n\n  customerRm: CustomerRm = {};\n\n  formGroup = new FormGroup({\n    id: new FormControl('', Validators.required),\n    firstName: new FormControl('', Validators.compose([\n      Validators.minLength(2),\n      Validators.maxLength(50)\n    ])),\n    lastName: new FormControl('', Validators.compose([\n      Validators.minLength(2),\n      Validators.maxLength(75)\n    ])),\n    email: new FormControl('', Validators.compose([\n      Validators.email,\n      Validators.minLength(5),\n      Validators.maxLength(100)\n    ]))\n  });\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n      const customerId = params['id'];\n      this.getCustomerById(customerId);\n    });\n  }\n\n  getCustomerById(customerId: string) {\n    this.customerService.getCustomer({ id: customerId })\n      .subscribe({\n        next: (customer) => this.customerRm = customer,\n        error: this.customerNotFound\n      });\n  }\n\n  private customerNotFound = (error: any) => {\n    Swal.fire({\n      icon: 'error',\n      title: 'Customer not found',\n      text: 'The customer you are looking for does not exist',\n      confirmButtonText: 'Ok'\n    })\n    .then(() => this.router.navigate(['/']));\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}