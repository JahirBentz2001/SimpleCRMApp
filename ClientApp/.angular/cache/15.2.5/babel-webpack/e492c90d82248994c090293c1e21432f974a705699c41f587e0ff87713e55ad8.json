{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction UpdateCustomerComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵelement(1, \"i\", 20);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateCustomerComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \"Invalid First Name\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateCustomerComponent_span_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \"Invalid Last Name\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateCustomerComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \"Invalid Email\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a1) {\n  return {\n    \"input\": true,\n    \"is-danger\": a1\n  };\n};\nconst _c1 = function () {\n  return [\"/\"];\n};\nexport class UpdateCustomerComponent {\n  constructor(customerService, activatedRoute, router) {\n    this.customerService = customerService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.customerRm = {};\n    this.formGroup = new FormGroup({\n      id: new FormControl(''),\n      firstName: new FormControl('', Validators.compose([Validators.minLength(3), Validators.maxLength(50)])),\n      lastName: new FormControl('', Validators.compose([Validators.minLength(3), Validators.maxLength(75)])),\n      email: new FormControl('', Validators.compose([Validators.email, Validators.minLength(5), Validators.maxLength(100)]))\n    });\n    this.customerNotFound = error => {\n      Swal.fire({\n        icon: 'error',\n        title: 'Customer not found',\n        text: 'The customer you are looking for does not exist',\n        confirmButtonText: 'Ok'\n      }).then(() => this.router.navigate(['/']));\n    };\n  }\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(params => {\n      const customerId = params['id'];\n      this.getCustomerById(customerId);\n    });\n  }\n  getCustomerById(customerId) {\n    this.customerService.getCustomer({\n      id: customerId\n    }).subscribe({\n      next: customer => this.customerRm = customer,\n      error: this.customerNotFound\n    });\n  }\n  updateCustomer() {\n    if (this.formGroup.invalid) return;\n    const customerDto = {\n      id: this.customerRm.id,\n      firstName: this.formGroup.controls.firstName.value,\n      lastName: this.formGroup.controls.lastName.value,\n      email: this.formGroup.controls.email.value\n    };\n    this.customerService.updateCustomer({\n      body: customerDto\n    });\n  }\n  // Form validations\n  get invalidFirstName() {\n    return this.formGroup.controls.firstName.invalid && (this.formGroup.controls.firstName.dirty || this.formGroup.controls.firstName.touched);\n  }\n  get invalidLastName() {\n    return this.formGroup.controls.lastName.invalid && (this.formGroup.controls.lastName.dirty || this.formGroup.controls.lastName.touched);\n  }\n  get invalidEmail() {\n    return this.formGroup.controls.email.invalid && (this.formGroup.controls.email.dirty || this.formGroup.controls.email.touched);\n  }\n}\nUpdateCustomerComponent.ɵfac = function UpdateCustomerComponent_Factory(t) {\n  return new (t || UpdateCustomerComponent)(i0.ɵɵdirectiveInject(i1.CustomerService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\nUpdateCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateCustomerComponent,\n  selectors: [[\"app-update-customer\"]],\n  decls: 33,\n  vars: 21,\n  consts: [[1, \"hero\"], [1, \"hero-body\"], [1, \"container\"], [1, \"title\"], [3, \"formGroup\"], [\"type\", \"hidden\", \"formControlName\", \"id\", 3, \"value\"], [1, \"field\", 2, \"width\", \"20rem\"], [1, \"label\"], [1, \"control\", \"has-icons-right\"], [\"formControlName\", \"firstName\", \"type\", \"text\", \"placeholder\", \"First Name\", 3, \"ngClass\", \"value\"], [\"class\", \"icon is-small is-right\", 4, \"ngIf\"], [\"class\", \"has-text-danger\", 4, \"ngIf\"], [1, \"control\"], [\"formControlName\", \"lastName\", \"type\", \"text\", \"placeholder\", \"Last Name\", 3, \"ngClass\", \"value\"], [\"formControlName\", \"email\", \"type\", \"email\", \"placeholder\", \"example@mail.com\", 3, \"ngClass\", \"value\"], [1, \"field\"], [\"type\", \"submit\", 1, \"button\", \"is-info\", 3, \"disabled\"], [1, \"control\", \"mt-2\"], [3, \"routerLink\"], [1, \"icon\", \"is-small\", \"is-right\"], [1, \"fa\", \"fa-exclamation-triangle\"], [1, \"has-text-danger\"]],\n  template: function UpdateCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \" Update customer \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\", 4);\n      i0.ɵɵelement(6, \"input\", 5);\n      i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n      i0.ɵɵtext(9, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 8);\n      i0.ɵɵelement(11, \"input\", 9);\n      i0.ɵɵtemplate(12, UpdateCustomerComponent_span_12_Template, 2, 0, \"span\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, UpdateCustomerComponent_span_13_Template, 2, 0, \"span\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\", 7);\n      i0.ɵɵtext(16, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 12);\n      i0.ɵɵelement(18, \"input\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, UpdateCustomerComponent_span_19_Template, 2, 0, \"span\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 6)(21, \"label\", 7);\n      i0.ɵɵtext(22, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"div\", 12);\n      i0.ɵɵelement(24, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(25, UpdateCustomerComponent_span_25_Template, 2, 0, \"span\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"div\", 15)(27, \"div\", 12)(28, \"button\", 16);\n      i0.ɵɵtext(29, \"Save changes\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(30, \"div\", 17)(31, \"a\", 18);\n      i0.ɵɵtext(32, \"Back\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.customerRm.id);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(14, _c0, ctx.invalidFirstName))(\"value\", ctx.customerRm.firstName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.invalidFirstName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.invalidFirstName);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(16, _c0, ctx.invalidLastName))(\"value\", ctx.customerRm.lastName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.invalidLastName);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(18, _c0, ctx.invalidEmail))(\"value\", ctx.customerRm.email);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.invalidEmail);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.formGroup.invalid);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(20, _c1));\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Swal","i0","UpdateCustomerComponent","constructor","customerService","activatedRoute","router","id","firstName","compose","minLength","maxLength","lastName","email","error","fire","icon","title","text","confirmButtonText","then","navigate","ngOnInit","params","subscribe","customerId","getCustomerById","getCustomer","next","customer","customerRm","customerNotFound","updateCustomer","formGroup","invalid","customerDto","controls","value","body","invalidFirstName","dirty","touched","invalidLastName","invalidEmail","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/update-customer/update-customer.component.ts","/home/jahir_benitez/Development/CRMApp/ClientApp/src/app/update-customer/update-customer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Validator } from '@angular/forms';\nimport { CustomerService } from '../api/services';\nimport { CustomerRm } from '../api/models';\nimport { CustomerDto } from '../api/models';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-update-customer',\n  templateUrl: './update-customer.component.html',\n  styleUrls: ['./update-customer.component.css']\n})\nexport class UpdateCustomerComponent implements OnInit {\n\n  constructor(\n    private customerService: CustomerService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ){}\n\n  customerRm: CustomerRm = {};\n\n  formGroup = new FormGroup({\n    id: new FormControl(''),\n    firstName: new FormControl('', Validators.compose([\n      Validators.minLength(3),\n      Validators.maxLength(50)\n    ])),\n    lastName: new FormControl('', Validators.compose([\n      Validators.minLength(3),\n      Validators.maxLength(75)\n    ])),\n    email: new FormControl('', Validators.compose([\n      Validators.email,\n      Validators.minLength(5),\n      Validators.maxLength(100)\n    ]))\n  });\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n      const customerId = params['id'];\n      this.getCustomerById(customerId);\n    });\n  }\n\n  getCustomerById(customerId: string) {\n    this.customerService.getCustomer({ id: customerId })\n      .subscribe({\n        next: (customer) => this.customerRm = customer,\n        error: this.customerNotFound\n      });\n  }\n\n  updateCustomer(){\n\n    if(this.formGroup.invalid)\n      return;\n\n    const customerDto: CustomerDto = {\n      id: this.customerRm.id,\n      firstName: this.formGroup.controls.firstName.value,\n      lastName: this.formGroup.controls.lastName.value,\n      email: this.formGroup.controls.email.value\n    };\n\n    this.customerService.updateCustomer({ body: customerDto})\n\n  }\n\n  private customerNotFound = (error: any) => {\n    Swal.fire({\n      icon: 'error',\n      title: 'Customer not found',\n      text: 'The customer you are looking for does not exist',\n      confirmButtonText: 'Ok'\n    })\n    .then(() => this.router.navigate(['/']));\n  }\n\n  // Form validations\n  get invalidFirstName(){\n    return this.formGroup.controls.firstName.invalid \n      && (this.formGroup.controls.firstName.dirty || this.formGroup.controls.firstName.touched);\n  }\n\n  get invalidLastName(){\n    return this.formGroup.controls.lastName.invalid \n      && (this.formGroup.controls.lastName.dirty || this.formGroup.controls.lastName.touched);\n  }\n\n  get invalidEmail(){\n    return this.formGroup.controls.email.invalid \n      && (this.formGroup.controls.email.dirty || this.formGroup.controls.email.touched);\n  }\n\n}\n","\n<section class=\"hero\">\n  <div class=\"hero-body\">\n    <div class=\"container\">\n      <h1 class=\"title\">\n        Update customer\n      </h1>\n      <form [formGroup]=\"formGroup\">\n        <input type=\"hidden\" formControlName=\"id\" [value]=\"customerRm.id\" />\n        <div class=\"field\" style=\"width: 20rem;\">\n            <label class=\"label\">First Name</label>\n            <div class=\"control has-icons-right\">\n                <input \n                    formControlName=\"firstName\" \n                    [ngClass]=\"{ \n                        'input': true,\n                        'is-danger': invalidFirstName\n                    }\"\n                    type=\"text\" \n                    placeholder=\"First Name\" \n                    [value]=\"customerRm.firstName\" />\n                    <span class=\"icon is-small is-right\" *ngIf=\"invalidFirstName\">\n                        <i class=\"fa fa-exclamation-triangle\"></i>\n                    </span>\n            </div>\n            <span class=\"has-text-danger\" *ngIf=\"invalidFirstName\">Invalid First Name</span>\n        </div>\n        <div class=\"field\" style=\"width: 20rem;\">\n            <label class=\"label\">Last Name</label>\n            <div class=\"control\">\n                <input \n                    formControlName=\"lastName\" \n                    [ngClass]=\"{ \n                        'input': true,\n                        'is-danger': invalidLastName\n                    }\"\n                    type=\"text\" \n                    placeholder=\"Last Name\" \n                    [value]=\"customerRm.lastName\" />\n            </div>\n            <span class=\"has-text-danger\" *ngIf=\"invalidLastName\">Invalid Last Name</span>\n        </div>\n        <div class=\"field\" style=\"width: 20rem;\">\n            <label class=\"label\">Email</label>\n            <div class=\"control\">\n                <input \n                    formControlName=\"email\" \n                    [ngClass]=\"{ \n                        'input': true,\n                        'is-danger': invalidEmail\n                    }\"\n                    type=\"email\" \n                    placeholder=\"example@mail.com\" \n                    [value]=\"customerRm.email\" />\n            </div>\n            <span class=\"has-text-danger\" *ngIf=\"invalidEmail\">Invalid Email</span>  \n        </div>\n        <div class=\"field\">\n            <div class=\"control\">\n                <button \n                    type=\"submit\" \n                    class=\"button is-info\"\n                    [disabled]=\"formGroup.invalid\">Save changes</button>\n            </div>\n            <div class=\"control mt-2\">\n                <a [routerLink]=\"['/']\">Back</a>\n            </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</section>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}